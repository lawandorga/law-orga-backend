# Generated by Django 4.1.3 on 2022-12-08 12:10

import uuid

import django.db.models.deletion
import tinymce.models
from django.conf import settings
from django.db import migrations, models

import core.data_sheets.models.data_sheet
import core.data_sheets.models.template
import core.folders.domain.aggregates.folder
import core.folders.domain.external
import core.seedwork.encryption


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("email", models.EmailField(max_length=255, unique=True)),
                ("name", models.CharField(max_length=255)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
            ],
            options={
                "verbose_name": "UserProfile",
                "verbose_name_plural": "UserProfiles",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CollabDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("path", models.CharField(max_length=4096)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "CollabDocument",
                "verbose_name_plural": "CollabDocuments",
                "ordering": ["path"],
            },
        ),
        migrations.CreateModel(
            name="CollabPermission",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "CollabPermission",
                "verbose_name_plural": "CollabPermissions",
            },
        ),
        migrations.CreateModel(
            name="EncryptedClient",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateField(auto_now_add=True)),
                ("last_edited", models.DateTimeField(auto_now_add=True)),
                ("name", models.BinaryField(null=True)),
                ("note", models.BinaryField(null=True)),
                ("phone_number", models.BinaryField(null=True)),
                ("encrypted_client_key", models.BinaryField(null=True)),
            ],
            options={
                "verbose_name": "Client",
                "verbose_name_plural": "Clients",
            },
            bases=(core.seedwork.encryption.EncryptedModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Folder",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("last_edited", models.DateTimeField(auto_now_add=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_folders",
                        to="core.folder",
                    ),
                ),
            ],
            options={
                "verbose_name": "Folder",
                "verbose_name_plural": "Folders",
            },
        ),
        migrations.CreateModel(
            name="FolderPermission",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "FolderPermission",
                "verbose_name_plural": "FolderPermissions",
            },
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("visible", models.BooleanField(default=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Group",
                "verbose_name_plural": "Groups",
            },
        ),
        migrations.CreateModel(
            name="HelpPage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "manual",
                    models.FileField(
                        upload_to="internal/helppage/manual/", verbose_name="Manual"
                    ),
                ),
            ],
            options={
                "verbose_name": "HelpPage",
                "verbose_name_plural": "HelpPage",
            },
        ),
        migrations.CreateModel(
            name="ImprintPage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", tinymce.models.HTMLField()),
            ],
            options={
                "verbose_name": "ImprintPage",
                "verbose_name_plural": "ImprintPage",
            },
        ),
        migrations.CreateModel(
            name="IndexPage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", tinymce.models.HTMLField()),
            ],
            options={
                "verbose_name": "IndexPage",
                "verbose_name_plural": "IndexPage",
            },
        ),
        migrations.CreateModel(
            name="LegalRequirement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=1000)),
                ("content", tinymce.models.HTMLField()),
                ("accept_required", models.BooleanField()),
                ("button_text", models.CharField(default="Accept", max_length=1000)),
                ("accept_text", models.CharField(default="Accepted", max_length=1000)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "LegalRequirement",
                "verbose_name_plural": "LegalRequirements",
            },
        ),
        migrations.CreateModel(
            name="MailAccount",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
                ("relative_path", models.UUIDField(default=uuid.uuid4, unique=True)),
            ],
            options={
                "verbose_name": "MailAccount",
                "verbose_name_plural": "MailAccounts",
            },
        ),
        migrations.CreateModel(
            name="MailOrg",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
            ],
            options={
                "verbose_name": "MailOrg",
                "verbose_name_plural": "MailOrgs",
            },
        ),
        migrations.CreateModel(
            name="Meta",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("name", models.CharField(max_length=1000)),
            ],
            options={
                "verbose_name": "Meta",
                "verbose_name_plural": "Metas",
            },
        ),
        migrations.CreateModel(
            name="Org",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "federal_state",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("BW", "Baden-Württemberg"),
                            ("BY", "Bayern (Freistaat)"),
                            ("BE", "Berlin"),
                            ("BB", "Brandenburg"),
                            ("HB", "Bremen (Hansestadt)"),
                            ("HH", "Hamburg (Hansestadt)"),
                            ("HE", "Hessen"),
                            ("MV", "Mecklenburg-Vorpommern"),
                            ("NI", "Niedersachsen"),
                            ("NW", "Nordrhein-Westfalen"),
                            ("RP", "Rheinland-Pfalz"),
                            ("SL", "Saarland"),
                            ("SN", "Sachsen (Freistaat)"),
                            ("ST", "Sachsen-Anhalt"),
                            ("SH", "Schleswig-Holstein"),
                            ("TH", "Thüringen (Freistaat)"),
                            ("OTHER", "Ausland"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                ("use_record_pool", models.BooleanField(default=False)),
                ("public_key", models.BinaryField(null=True)),
                ("private_key", models.BinaryField(null=True)),
                (
                    "meta",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.meta",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rlc",
                "verbose_name_plural": "Rlcs",
                "ordering": ["name"],
            },
            bases=(core.seedwork.encryption.EncryptedModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Permission",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, unique=True)),
                ("description", models.TextField(blank=True)),
                ("recommended_for", models.CharField(max_length=200)),
            ],
            options={
                "verbose_name": "Permission",
                "verbose_name_plural": "Permissions",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Questionnaire",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.SlugField(blank=True, unique=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "RecordQuestionnaire",
                "verbose_name_plural": "RecordQuestionnaires",
            },
        ),
        migrations.CreateModel(
            name="QuestionnaireTemplate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("notes", models.TextField(blank=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Questionnaire",
                "verbose_name_plural": "Questionnaire",
            },
        ),
        migrations.CreateModel(
            name="Record",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("folder_uuid", models.UUIDField(db_index=True, null=True)),
                (
                    "uuid",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
                ("key", models.JSONField(null=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "old_client",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="records",
                        to="core.encryptedclient",
                    ),
                ),
            ],
            options={
                "verbose_name": "Record",
                "verbose_name_plural": "Records",
                "ordering": ["-created"],
            },
        ),
        migrations.CreateModel(
            name="RecordTemplate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "show",
                    models.JSONField(default=lambda: []),
                ),
                (
                    "rlc",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recordtemplates",
                        to="core.org",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordTemplate",
                "verbose_name_plural": "RecordTemplates",
            },
        ),
        migrations.CreateModel(
            name="RoadmapItem",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("updated", models.DateTimeField(auto_now=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("title", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("date", models.DateField()),
            ],
            options={
                "verbose_name": "RoadmapItem",
                "verbose_name_plural": "RoadmapItems",
                "ordering": ["date"],
            },
        ),
        migrations.CreateModel(
            name="TomsPage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", tinymce.models.HTMLField()),
            ],
            options={
                "verbose_name": "TomsPage",
                "verbose_name_plural": "TomsPage",
            },
        ),
        migrations.CreateModel(
            name="TextDocumentVersion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.BinaryField(blank=True)),
                ("quill", models.BooleanField(default=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="versions",
                        to="core.collabdocument",
                    ),
                ),
            ],
            options={
                "verbose_name": "TextDocumentVersion",
                "verbose_name_plural": "TextDocumentVersions",
            },
            bases=(core.seedwork.encryption.EncryptedModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="StatisticUser",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statistic_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "StatisticUser",
                "verbose_name_plural": "StatisticUsers",
                "ordering": ["user__name"],
            },
        ),
        migrations.CreateModel(
            name="RlcUser",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
                ("email_confirmed", models.BooleanField(default=True)),
                ("accepted", models.BooleanField(default=False)),
                ("locked", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("note", models.TextField(blank=True)),
                ("birthday", models.DateField(blank=True, null=True)),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, default=None, max_length=17, null=True
                    ),
                ),
                (
                    "street",
                    models.CharField(
                        blank=True, default=None, max_length=255, null=True
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, default=None, max_length=255, null=True
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        blank=True, default=None, max_length=255, null=True
                    ),
                ),
                (
                    "speciality_of_study",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("LAW", "Law Sciences"),
                            ("PSYCH", "Psychology"),
                            ("POL", "Political Science"),
                            ("SOC", "Social Sciences"),
                            ("ECO", "Economics"),
                            ("MED", "Medicine / Medical Psychology"),
                            ("PHA", "Pharmacy"),
                            ("CUL", "Cultural Studies"),
                            ("OTHER", "Other"),
                            ("NONE", "None"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                ("calendar_uuid", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("frontend_settings", models.JSONField(blank=True, null=True)),
                ("key", models.JSONField(blank=True, null=True)),
                ("old_private_key", models.BinaryField(null=True)),
                ("is_private_key_encrypted", models.BooleanField(default=False)),
                ("old_public_key", models.BinaryField(null=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="users",
                        to="core.org",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rlc_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "RlcUser",
                "verbose_name_plural": "RlcUsers",
                "ordering": ["accepted", "locked", "is_active", "user__name"],
            },
        ),
        migrations.CreateModel(
            name="RecordUsersField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("order", models.IntegerField(default=0)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("share_keys", models.BooleanField(default=True)),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.group",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="users_fields",
                        to="core.recordtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordUsersField",
                "verbose_name_plural": "RecordUsersFields",
            },
        ),
        migrations.CreateModel(
            name="RecordStatisticField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("order", models.IntegerField(default=0)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("options", models.JSONField(default=list)),
                ("helptext", models.CharField(max_length=1000)),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statistic_fields",
                        to="core.recordtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordStatisticField",
                "verbose_name_plural": "RecordStatisticFields",
            },
        ),
        migrations.CreateModel(
            name="RecordStateField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("order", models.IntegerField(default=0)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("options", models.JSONField(default=list)),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="state_fields",
                        to="core.recordtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordStateField",
                "verbose_name_plural": "RecordStateFields",
            },
        ),
        migrations.CreateModel(
            name="RecordStandardField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("order", models.IntegerField(default=0)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "field_type",
                    models.CharField(
                        choices=[
                            ("TEXTAREA", "Multi Line"),
                            ("TEXT", "Single Line"),
                            ("DATETIME-LOCAL", "Date and Time"),
                            ("DATE", "Date"),
                        ],
                        default="TEXT",
                        max_length=20,
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="standard_fields",
                        to="core.recordtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordStandardField",
                "verbose_name_plural": "RecordStandardFields",
            },
        ),
        migrations.CreateModel(
            name="RecordSelectField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("order", models.IntegerField(default=0)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("options", models.JSONField(default=list)),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="select_fields",
                        to="core.recordtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordSelectField",
                "verbose_name_plural": "RecordSelectFields",
            },
        ),
        migrations.CreateModel(
            name="RecordMultipleField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("order", models.IntegerField(default=0)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("options", models.JSONField(default=list)),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="multiple_fields",
                        to="core.recordtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordMultipleField",
                "verbose_name_plural": "RecordMultipleFields",
            },
        ),
        migrations.CreateModel(
            name="RecordEncryptedStandardField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("order", models.IntegerField(default=0)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "field_type",
                    models.CharField(
                        choices=[
                            ("TEXTAREA", "Multi Line"),
                            ("TEXT", "Single Line"),
                            ("DATE", "Date"),
                        ],
                        default="TEXT",
                        max_length=20,
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="encrypted_standard_fields",
                        to="core.recordtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordEncryptedStandardField",
                "verbose_name_plural": "RecordEncryptedStandardFields",
            },
        ),
        migrations.CreateModel(
            name="RecordEncryptedSelectField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("order", models.IntegerField(default=0)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("options", models.JSONField(default=list)),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="encrypted_select_fields",
                        to="core.recordtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordEncryptedSelectField",
                "verbose_name_plural": "RecordEncryptedSelectFields",
            },
        ),
        migrations.CreateModel(
            name="RecordEncryptedFileField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("order", models.IntegerField(default=0)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="encrypted_file_fields",
                        to="core.recordtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordEncryptedFileField",
                "verbose_name_plural": "RecordEncryptedFileFields",
            },
        ),
        migrations.CreateModel(
            name="RecordDeletion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("explanation", models.TextField()),
                ("processed", models.DateTimeField(blank=True, null=True)),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("re", "Requested"),
                            ("gr", "Granted"),
                            ("de", "Declined"),
                        ],
                        default="re",
                        max_length=2,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "processed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="processedrecorddeletions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "record",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="deletions",
                        to="core.record",
                    ),
                ),
                (
                    "requested_by",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="requestedrecorddeletions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordDeletion",
                "verbose_name_plural": "RecordDeletions",
                "ordering": ["-state", "-created"],
            },
        ),
        migrations.CreateModel(
            name="RecordAccess",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("processed_on", models.DateTimeField(blank=True, null=True)),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("re", "requested"),
                            ("gr", "granted"),
                            ("de", "declined"),
                        ],
                        default="re",
                        max_length=2,
                    ),
                ),
                ("explanation", models.TextField(blank=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "processed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="processedrecordaccesses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="e_permissions_requested",
                        to="core.record",
                    ),
                ),
                (
                    "requested_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="requestedrecordaccesses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordAccess",
                "verbose_name_plural": "RecordAccesses",
                "ordering": ["-state", "-created"],
            },
        ),
        migrations.AddField(
            model_name="record",
            name="template",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="records",
                to="core.recordtemplate",
            ),
        ),
        migrations.CreateModel(
            name="QuestionnaireTemplateFile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("file", models.FileField(upload_to="questionnairefile/")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "questionnaire",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="files",
                        to="core.questionnairetemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "QuestionnaireFile",
                "verbose_name_plural": "QuestionnaireFiles",
            },
        ),
        migrations.AddField(
            model_name="questionnairetemplate",
            name="records",
            field=models.ManyToManyField(
                through="core.Questionnaire", to="core.record"
            ),
        ),
        migrations.AddField(
            model_name="questionnairetemplate",
            name="rlc",
            field=models.ForeignKey(
                blank=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="questionnaires",
                to="core.org",
            ),
        ),
        migrations.CreateModel(
            name="QuestionnaireQuestion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question", models.CharField(max_length=100)),
                (
                    "type",
                    models.CharField(
                        choices=[("FILE", "File"), ("TEXTAREA", "Text")], max_length=20
                    ),
                ),
                ("order", models.IntegerField(default=0)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "questionnaire",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fields",
                        to="core.questionnairetemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "QuestionnaireField",
                "verbose_name_plural": "QuestionnaireFields",
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="QuestionnaireAnswer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("data", models.BinaryField()),
                ("aes_key", models.BinaryField(default=b"")),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="core.questionnairequestion",
                    ),
                ),
                (
                    "questionnaire",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="core.questionnaire",
                    ),
                ),
            ],
            options={
                "verbose_name": "QuestionnaireAnswer",
                "verbose_name_plural": "QuestionnaireAnswers",
            },
            bases=(core.seedwork.encryption.EncryptedModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name="questionnaire",
            name="record",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="questionnaires",
                to="core.record",
            ),
        ),
        migrations.AddField(
            model_name="questionnaire",
            name="template",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="questionnaires",
                to="core.questionnairetemplate",
            ),
        ),
        migrations.CreateModel(
            name="PoolRecord",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("record_key", models.CharField(max_length=255)),
                (
                    "record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.record"
                    ),
                ),
            ],
            options={
                "verbose_name": "PoolRecord",
                "verbose_name_plural": "PoolRecords",
            },
        ),
        migrations.CreateModel(
            name="PoolConsultant",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "consultant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "PoolConsultant",
                "verbose_name_plural": "PoolConsultants",
            },
        ),
        migrations.CreateModel(
            name="PermissionForFolder",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="folder_permissions_for_folder",
                        to="core.folder",
                    ),
                ),
                (
                    "group_has_permission",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_has_folder_permissions",
                        to="core.group",
                    ),
                ),
                (
                    "permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="in_permission_for_folder",
                        to="core.folderpermission",
                    ),
                ),
            ],
            options={
                "verbose_name": "PermissionForFolder",
                "verbose_name_plural": "PermissionsForFolders",
            },
        ),
        migrations.CreateModel(
            name="OldUserEncryptionKeys",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("private_key", models.BinaryField()),
                ("private_key_encrypted", models.BooleanField(default=False)),
                ("public_key", models.BinaryField()),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="encryption_keys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "UserEncryptionKey",
                "verbose_name_plural": "UserEncryptionKeys",
            },
            bases=(core.seedwork.encryption.EncryptedModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="OldRlcEncryptionKeys",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("public_key", models.BinaryField()),
                ("encrypted_private_key", models.BinaryField()),
                (
                    "rlc",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="encryption_keys",
                        to="core.org",
                    ),
                ),
            ],
            options={
                "verbose_name": "RlcEncryptionKey",
                "verbose_name_plural": "RlcEncryptionKeys",
            },
            bases=(core.seedwork.encryption.EncryptedModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Note",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("note", models.TextField(blank=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "rlc",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notes",
                        to="core.org",
                    ),
                ),
            ],
            options={
                "verbose_name": "Note",
                "verbose_name_plural": "Notes",
                "ordering": ["-created"],
            },
        ),
        migrations.CreateModel(
            name="MatrixUser",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "matrix_id",
                    models.CharField(editable=False, max_length=8, unique=True),
                ),
                ("_group", models.CharField(blank=True, max_length=255, null=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="matrix_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "MatrixUser",
                "verbose_name_plural": "MatrixUsers",
                "ordering": ["user__name"],
            },
        ),
        migrations.CreateModel(
            name="MailUser",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
                ("pw_hash", models.CharField(max_length=1000)),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="members",
                        to="core.mailorg",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mail_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "MailUser",
                "verbose_name_plural": "MailUsers",
            },
        ),
        migrations.CreateModel(
            name="MailGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
                (
                    "members",
                    models.ManyToManyField(related_name="groups", to="core.mailuser"),
                ),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="groups",
                        to="core.mailorg",
                    ),
                ),
            ],
            options={
                "verbose_name": "MailGroup",
                "verbose_name_plural": "MailGroups",
            },
        ),
        migrations.CreateModel(
            name="MailDomain",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
                ("name", models.CharField(db_index=True, max_length=200, unique=True)),
                (
                    "org",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="domains",
                        to="core.mailorg",
                    ),
                ),
            ],
            options={
                "verbose_name": "MailDomain",
                "verbose_name_plural": "MailDomains",
            },
        ),
        migrations.CreateModel(
            name="MailAdmin",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="admin",
                        to="core.mailuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "MailAdmin",
                "verbose_name_plural": "MailAdmins",
            },
        ),
        migrations.CreateModel(
            name="MailAddress",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
                ("localpart", models.CharField(db_index=True, max_length=100)),
                ("is_default", models.BooleanField(db_index=True, default=False)),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="addresses",
                        to="core.mailaccount",
                    ),
                ),
                (
                    "domain",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="addresses",
                        to="core.maildomain",
                    ),
                ),
            ],
            options={
                "verbose_name": "MailAddress",
                "verbose_name_plural": "MailAddress",
            },
        ),
        migrations.AddField(
            model_name="mailaccount",
            name="group",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="account",
                to="core.mailgroup",
            ),
        ),
        migrations.AddField(
            model_name="mailaccount",
            name="user",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="account",
                to="core.mailuser",
            ),
        ),
        migrations.CreateModel(
            name="LoggedPath",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("path", models.CharField(max_length=200)),
                ("time", models.DateTimeField(auto_now_add=True)),
                ("status", models.IntegerField(default=0)),
                ("method", models.CharField(default="UNKNOWN", max_length=20)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logged_paths",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "LoggedPath",
                "verbose_name_plural": "LoggedPaths",
                "ordering": ["-time"],
            },
        ),
        migrations.CreateModel(
            name="LegalRequirementUser",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "legal_requirement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="legal_requirements_user",
                        to="core.legalrequirement",
                    ),
                ),
                (
                    "rlc_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="legal_requirements_user",
                        to="core.rlcuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "LegalRequirementUser",
                "verbose_name_plural": "LegalRequirementUsers",
            },
        ),
        migrations.CreateModel(
            name="LegalRequirementEvent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField(blank=True)),
                ("accepted", models.BooleanField()),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "actor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.rlcuser",
                    ),
                ),
                (
                    "legal_requirement_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to="core.legalrequirementuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "LegalRequirementEvent",
                "verbose_name_plural": "LegalRequirementEvents",
            },
        ),
        migrations.AddField(
            model_name="legalrequirement",
            name="rlc_users",
            field=models.ManyToManyField(
                related_name="legal_requirements",
                through="core.LegalRequirementUser",
                to="core.rlcuser",
            ),
        ),
        migrations.CreateModel(
            name="InternalUser",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="internal_user",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "InternalUser",
                "verbose_name_plural": "InternalUsers",
            },
        ),
        migrations.CreateModel(
            name="HasPermission",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "group_has_permission",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_has_permission",
                        to="core.group",
                    ),
                ),
                (
                    "permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="in_has_permission",
                        to="core.permission",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permissions",
                        to="core.rlcuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "HasPermission",
                "verbose_name_plural": "HasPermissions",
            },
        ),
        migrations.AddField(
            model_name="group",
            name="from_rlc",
            field=models.ForeignKey(
                blank=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="group_from_rlc",
                to="core.org",
            ),
        ),
        migrations.AddField(
            model_name="group",
            name="members",
            field=models.ManyToManyField(
                blank=True, related_name="groups", to="core.rlcuser"
            ),
        ),
        migrations.CreateModel(
            name="FoldersFolder",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(db_index=True, default=uuid.uuid4, unique=True),
                ),
                ("name", models.CharField(max_length=1000)),
                ("keys", models.JSONField(blank=True)),
                ("items", models.JSONField(blank=True)),
                ("stop_inherit", models.BooleanField(default=False)),
                ("deleted", models.BooleanField(blank=True, default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "_parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.foldersfolder",
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="folders_folders",
                        to="core.org",
                    ),
                ),
            ],
            options={
                "verbose_name": "FoldersFolder",
                "verbose_name_plural": "FoldersFolders",
            },
        ),
        migrations.AddField(
            model_name="folder",
            name="rlc",
            field=models.ForeignKey(
                blank=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="folders",
                to="core.org",
            ),
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("last_edited", models.DateTimeField(auto_now=True)),
                ("key", models.CharField(max_length=1000, null=True, unique=True)),
                (
                    "file",
                    models.FileField(blank=True, null=True, upload_to="files/file/"),
                ),
                ("exists", models.BooleanField(default=True)),
                (
                    "creator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="files_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="files_in_folder",
                        to="core.folder",
                    ),
                ),
            ],
            options={
                "verbose_name": "File",
                "verbose_name_plural": "Files",
                "ordering": ["exists", "-created"],
            },
        ),
        migrations.CreateModel(
            name="ExternalLink",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("link", models.URLField(max_length=1000)),
                ("order", models.IntegerField()),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="external_links",
                        to="core.org",
                    ),
                ),
            ],
            options={
                "verbose_name": "ExternalLink",
                "verbose_name_plural": "ExternalLinks",
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("is_global", models.BooleanField(default=False)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, default="")),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="events",
                        to="core.org",
                    ),
                ),
            ],
            options={
                "ordering": ["start_time"],
            },
        ),
        migrations.CreateModel(
            name="EncryptedRecordMessage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("message", models.BinaryField()),
                (
                    "record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="core.record",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="messages",
                        to="core.rlcuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordMessage",
                "verbose_name_plural": "RecordMessages",
                "ordering": ["created"],
            },
            bases=(core.seedwork.encryption.EncryptedModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="EncryptedRecordDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("last_edited", models.DateTimeField(auto_now_add=True)),
                ("file_size", models.BigIntegerField(null=True)),
                (
                    "key",
                    models.SlugField(
                        allow_unicode=True, max_length=1000, null=True, unique=True
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                (
                    "record",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="core.record",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordDocument",
                "verbose_name_plural": "RecordDocuments",
            },
        ),
        migrations.AddField(
            model_name="encryptedclient",
            name="from_rlc",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="e_client_from_rlc",
                to="core.org",
            ),
        ),
        migrations.AddField(
            model_name="collabdocument",
            name="rlc",
            field=models.ForeignKey(
                blank=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="collab_documents",
                to="core.org",
            ),
        ),
        migrations.CreateModel(
            name="Article",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("updated", models.DateTimeField(auto_now=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("title", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("date", models.DateField()),
                ("content", tinymce.models.HTMLField()),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.internaluser",
                    ),
                ),
            ],
            options={
                "verbose_name": "Article",
                "verbose_name_plural": "Articles",
                "ordering": ["-date"],
            },
        ),
        migrations.AddField(
            model_name="userprofile",
            name="rlc_old",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="rlc_members",
                to="core.org",
            ),
        ),
        migrations.AddField(
            model_name="userprofile",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.CreateModel(
            name="RecordUsersEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="entries",
                        to="core.recordusersfield",
                    ),
                ),
                (
                    "record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="users_entries",
                        to="core.record",
                    ),
                ),
                ("value", models.ManyToManyField(blank=True, to="core.rlcuser")),
            ],
            options={
                "verbose_name": "RecordUsersEntry",
                "verbose_name_plural": "RecordUsersEntries",
                "unique_together": {("record", "field")},
            },
        ),
        migrations.CreateModel(
            name="RecordStatisticEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("value", models.CharField(max_length=200)),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="entries",
                        to="core.recordstatisticfield",
                    ),
                ),
                (
                    "record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statistic_entries",
                        to="core.record",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordStatisticEntry",
                "verbose_name_plural": "RecordStatisticEntries",
                "unique_together": {("record", "field")},
            },
        ),
        migrations.CreateModel(
            name="RecordStateEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("value", models.CharField(max_length=1000)),
                (
                    "closed_at",
                    models.DateTimeField(blank=True, default=None, null=True),
                ),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="entries",
                        to="core.recordstatefield",
                    ),
                ),
                (
                    "record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="state_entries",
                        to="core.record",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordStateEntry",
                "verbose_name_plural": "RecordStateEntries",
                "unique_together": {("record", "field")},
            },
        ),
        migrations.CreateModel(
            name="RecordStandardEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("value", models.TextField(max_length=20000)),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="entries",
                        to="core.recordstandardfield",
                    ),
                ),
                (
                    "record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="standard_entries",
                        to="core.record",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordStandardEntry",
                "verbose_name_plural": "RecordStandardEntries",
                "unique_together": {("record", "field")},
            },
        ),
        migrations.CreateModel(
            name="RecordSelectEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("value", models.CharField(max_length=200)),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="entries",
                        to="core.recordselectfield",
                    ),
                ),
                (
                    "record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="select_entries",
                        to="core.record",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordSelectEntry",
                "verbose_name_plural": "RecordSelectEntries",
                "unique_together": {("record", "field")},
            },
        ),
        migrations.CreateModel(
            name="RecordMultipleEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("value", models.JSONField()),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="entries",
                        to="core.recordmultiplefield",
                    ),
                ),
                (
                    "record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="multiple_entries",
                        to="core.record",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordMultipleEntry",
                "verbose_name_plural": "RecordMultipleEntries",
                "unique_together": {("record", "field")},
            },
        ),
        migrations.CreateModel(
            name="RecordEncryptionNew",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("key", models.BinaryField()),
                ("correct", models.BooleanField(default=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="encryptions",
                        to="core.record",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recordencryptions",
                        to="core.rlcuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordEncryption",
                "verbose_name_plural": "RecordEncryptions",
                "unique_together": {("user", "record")},
            },
            bases=(core.seedwork.encryption.EncryptedModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="RecordEncryptedStandardEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("value", models.BinaryField()),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="entries",
                        to="core.recordencryptedstandardfield",
                    ),
                ),
                (
                    "record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="encrypted_standard_entries",
                        to="core.record",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordStandardEntry",
                "verbose_name_plural": "RecordStandardEntries",
                "unique_together": {("record", "field")},
            },
            bases=(
                core.data_sheets.models.data_sheet.DataSheetEntryEncryptedModelMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="RecordEncryptedSelectEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("value", models.BinaryField()),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="entries",
                        to="core.recordencryptedselectfield",
                    ),
                ),
                (
                    "record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="encrypted_select_entries",
                        to="core.record",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordEncryptedSelectEntry",
                "verbose_name_plural": "RecordEncryptedSelectEntries",
                "unique_together": {("record", "field")},
            },
            bases=(
                core.data_sheets.models.data_sheet.DataSheetEntryEncryptedModelMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="RecordEncryptedFileEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "file",
                    models.FileField(
                        upload_to="recordmanagement/recordencryptedfileentry/"
                    ),
                ),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="entries",
                        to="core.recordencryptedfilefield",
                    ),
                ),
                (
                    "record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="encrypted_file_entries",
                        to="core.record",
                    ),
                ),
            ],
            options={
                "verbose_name": "RecordEncryptedFileEntry",
                "verbose_name_plural": "RecordEncryptedFileEntries",
                "unique_together": {("record", "field")},
            },
        ),
        migrations.CreateModel(
            name="PermissionForCollabDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collab_permissions",
                        to="core.collabdocument",
                    ),
                ),
                (
                    "group_has_permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_has_collab_permission",
                        to="core.group",
                    ),
                ),
                (
                    "permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="in_permission_for_document",
                        to="core.collabpermission",
                    ),
                ),
            ],
            options={
                "unique_together": {("permission", "group_has_permission", "document")},
            },
        ),
        migrations.CreateModel(
            name="OrgEncryption",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("encrypted_key", models.BinaryField()),
                ("correct", models.BooleanField(default=True)),
                (
                    "rlc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="encrypted_users_rlc_keys",
                        to="core.org",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="users_rlc_keys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "UserRlcKeys",
                "verbose_name_plural": "UsersRlcKeys",
                "unique_together": {("user", "rlc")},
            },
            bases=(core.seedwork.encryption.EncryptedModelMixin, models.Model),
        ),
        migrations.AddConstraint(
            model_name="mailaccount",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("group__isnull", True), ("user__isnull", False)),
                    models.Q(("group__isnull", False), ("user__isnull", True)),
                    _connector="OR",
                ),
                name="one_of_both_is_set",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="legalrequirementuser",
            unique_together={("legal_requirement", "rlc_user")},
        ),
        migrations.AlterUniqueTogether(
            name="haspermission",
            unique_together={("permission", "user", "group_has_permission")},
        ),
        migrations.AlterUniqueTogether(
            name="collabdocument",
            unique_together={("rlc", "path")},
        ),
    ]
